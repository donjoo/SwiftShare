{"ast":null,"code":"import axios from 'axios';\nconst adminAxiosInstance = axios.create({\n  baseURL: 'http://localhost:8000/admin/'\n});\n\n// adminAxiosInstance.interceptors.request.use(\n//     (config) => {\n//         const adminToken = localStorage.getItem('adminToken');\n//         if (adminToken) {\n//             config.headers['Authorization'] = `Bearer ${adminToken}`;\n//         }\n\n//         return config;\n//     },\n//     (error) => Promise.reject(error)\n// );  \n\n// Add a response interceptor\nadminAxiosInstance.interceptors.response.use(response => response,\n// Pass through successful responses\nasync error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // Check if the error is due to an unauthorized request and retry logic hasn't been triggered yet\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true; // Mark the request as retried to prevent infinite loops\n\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('Refresh token not available. Please log in again.');\n      }\n\n      // Make a request to refresh the access token\n      const response = await axios.post('http://localhost:8000/admin/token/refresh/', {\n        refresh: refreshToken\n      });\n\n      // Update the access token in localStorage\n      localStorage.setItem('adminToken', response.data.access);\n\n      // Update the Authorization header with the new token\n      originalRequest.headers['Authorization'] = `Bearer ${response.data.access}`;\n\n      // Retry the original request\n      return adminAxiosInstance(originalRequest);\n    } catch (refreshError) {\n      console.error('Token refresh failed:', refreshError);\n\n      // Handle failed token refresh (e.g., log out the user)\n      localStorage.clear();\n      window.location.href = '/admin-login';\n    }\n  }\n\n  // If the error is not handled above, reject the promise\n  return Promise.reject(error);\n});\nexport default adminAxiosInstance;","map":{"version":3,"names":["axios","adminAxiosInstance","create","baseURL","interceptors","response","use","error","_error$response","originalRequest","config","status","_retry","refreshToken","localStorage","getItem","Error","post","refresh","setItem","data","access","headers","refreshError","console","clear","window","location","href","Promise","reject"],"sources":["/media/donjo/HDD/projects/SwiftShare/frontend/src/adminaxiosconfig.jsx"],"sourcesContent":["import axios from 'axios';\n\n\nconst adminAxiosInstance = axios.create({\n    baseURL: 'http://localhost:8000/admin/'\n});\n\n// adminAxiosInstance.interceptors.request.use(\n//     (config) => {\n//         const adminToken = localStorage.getItem('adminToken');\n//         if (adminToken) {\n//             config.headers['Authorization'] = `Bearer ${adminToken}`;\n//         }\n\n//         return config;\n//     },\n//     (error) => Promise.reject(error)\n// );  \n\n\n\n// Add a response interceptor\nadminAxiosInstance.interceptors.response.use(\n    (response) => response, // Pass through successful responses\n    async (error) => {\n        const originalRequest = error.config;\n\n        // Check if the error is due to an unauthorized request and retry logic hasn't been triggered yet\n        if (error.response?.status === 401 && !originalRequest._retry) {\n            originalRequest._retry = true; // Mark the request as retried to prevent infinite loops\n\n            try {\n                const refreshToken = localStorage.getItem('refreshToken');\n                if (!refreshToken) {\n                    throw new Error('Refresh token not available. Please log in again.');\n                }\n\n                // Make a request to refresh the access token\n                const response = await axios.post('http://localhost:8000/admin/token/refresh/', {\n                    refresh: refreshToken,\n                });\n\n                // Update the access token in localStorage\n                localStorage.setItem('adminToken', response.data.access);\n\n                // Update the Authorization header with the new token\n                originalRequest.headers['Authorization'] = `Bearer ${response.data.access}`;\n\n                // Retry the original request\n                return adminAxiosInstance(originalRequest);\n            } catch (refreshError) {\n                console.error('Token refresh failed:', refreshError);\n\n                // Handle failed token refresh (e.g., log out the user)\n                localStorage.clear();\n                window.location.href = '/admin-login';\n            }\n        }\n\n        // If the error is not handled above, reject the promise\n        return Promise.reject(error);\n    }\n);\n\nexport default adminAxiosInstance"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,kBAAkB,GAAGD,KAAK,CAACE,MAAM,CAAC;EACpCC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACAF,kBAAkB,CAACG,YAAY,CAACC,QAAQ,CAACC,GAAG,CACvCD,QAAQ,IAAKA,QAAQ;AAAE;AACxB,MAAOE,KAAK,IAAK;EAAA,IAAAC,eAAA;EACb,MAAMC,eAAe,GAAGF,KAAK,CAACG,MAAM;;EAEpC;EACA,IAAI,EAAAF,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBG,MAAM,MAAK,GAAG,IAAI,CAACF,eAAe,CAACG,MAAM,EAAE;IAC3DH,eAAe,CAACG,MAAM,GAAG,IAAI,CAAC,CAAC;;IAE/B,IAAI;MACA,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACzD,IAAI,CAACF,YAAY,EAAE;QACf,MAAM,IAAIG,KAAK,CAAC,mDAAmD,CAAC;MACxE;;MAEA;MACA,MAAMX,QAAQ,GAAG,MAAML,KAAK,CAACiB,IAAI,CAAC,4CAA4C,EAAE;QAC5EC,OAAO,EAAEL;MACb,CAAC,CAAC;;MAEF;MACAC,YAAY,CAACK,OAAO,CAAC,YAAY,EAAEd,QAAQ,CAACe,IAAI,CAACC,MAAM,CAAC;;MAExD;MACAZ,eAAe,CAACa,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUjB,QAAQ,CAACe,IAAI,CAACC,MAAM,EAAE;;MAE3E;MACA,OAAOpB,kBAAkB,CAACQ,eAAe,CAAC;IAC9C,CAAC,CAAC,OAAOc,YAAY,EAAE;MACnBC,OAAO,CAACjB,KAAK,CAAC,uBAAuB,EAAEgB,YAAY,CAAC;;MAEpD;MACAT,YAAY,CAACW,KAAK,CAAC,CAAC;MACpBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,cAAc;IACzC;EACJ;;EAEA;EACA,OAAOC,OAAO,CAACC,MAAM,CAACvB,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeN,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}