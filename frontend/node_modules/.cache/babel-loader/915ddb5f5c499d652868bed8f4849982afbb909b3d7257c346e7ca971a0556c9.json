{"ast":null,"code":"var _jsxFileName = \"/media/donjo/HDD/projects/SwiftShare/frontend/src/components/protectedroutes/privateroutes.jsx\",\n  _s = $RefreshSig$();\nimport { Navigate } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\"; // Fixed import for `jwtDecode`\nimport api from \"../../api\";\nimport { ACCESS_TOKEN } from \"../../constants\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProtectedRoute({\n  children\n}) {\n  _s();\n  const [isAuthorized, setIsAuthorized] = useState(null); // `null` indicates loading state\n\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const token = localStorage.getItem(ACCESS_TOKEN);\n\n        // No token, user is unauthorized\n        if (!token) {\n          setIsAuthorized(false);\n          return;\n        }\n        const decoded = jwtDecode(token);\n        const tokenExpiration = decoded.exp;\n        const now = Date.now() / 1000;\n\n        // Token expired, attempt to refresh\n        if (tokenExpiration < now) {\n          await refreshToken();\n        } else {\n          setIsAuthorized(true); // Valid token\n        }\n      } catch (error) {\n        console.error(\"Authentication check failed:\", error);\n        setIsAuthorized(false);\n      }\n    };\n    checkAuthStatus(); // Call the function on mount\n  }, []); // Empty dependency array ensures this runs once\n\n  const refreshToken = async () => {\n    try {\n      const res = await api.post(\"/api/token/refresh/\"); // Secure cookie-based refresh\n      if (res.status === 200) {\n        localStorage.setItem(ACCESS_TOKEN, res.data.access); // Update access token\n        setIsAuthorized(true); // Refresh successful\n      } else {\n        setIsAuthorized(false); // Failed refresh\n      }\n    } catch (error) {\n      console.error(\"Error refreshing token:\", error);\n      setIsAuthorized(false); // Handle failure gracefully\n    }\n  };\n\n  // Show a loading indicator while authorization is being checked\n  if (isAuthorized === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If authorized, render the children; otherwise, redirect to login\n  return isAuthorized ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 38\n  }, this);\n}\n_s(ProtectedRoute, \"/RbkxiFcbMKahpHiUnYVhfdK+Ww=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Navigate","jwtDecode","api","ACCESS_TOKEN","useState","useEffect","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","isAuthorized","setIsAuthorized","checkAuthStatus","token","localStorage","getItem","decoded","tokenExpiration","exp","now","Date","refreshToken","error","console","res","post","status","setItem","data","access","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/media/donjo/HDD/projects/SwiftShare/frontend/src/components/protectedroutes/privateroutes.jsx"],"sourcesContent":["import { Navigate } from \"react-router-dom\";\nimport {jwtDecode} from \"jwt-decode\"; // Fixed import for `jwtDecode`\nimport api from \"../../api\";\nimport { ACCESS_TOKEN } from \"../../constants\";\nimport { useState, useEffect } from \"react\";\n\nfunction ProtectedRoute({ children }) {\n    const [isAuthorized, setIsAuthorized] = useState(null); // `null` indicates loading state\n\n    useEffect(() => {\n        const checkAuthStatus = async () => {\n            try {\n                const token = localStorage.getItem(ACCESS_TOKEN);\n\n                // No token, user is unauthorized\n                if (!token) {\n                    setIsAuthorized(false);\n                    return;\n                }\n\n                const decoded = jwtDecode(token);\n                const tokenExpiration = decoded.exp;\n                const now = Date.now() / 1000;\n\n                // Token expired, attempt to refresh\n                if (tokenExpiration < now) {\n                    await refreshToken();\n                } else {\n                    setIsAuthorized(true); // Valid token\n                }\n            } catch (error) {\n                console.error(\"Authentication check failed:\", error);\n                setIsAuthorized(false);\n            }\n        };\n\n        checkAuthStatus(); // Call the function on mount\n    }, []); // Empty dependency array ensures this runs once\n\n    const refreshToken = async () => {\n        try {\n            const res = await api.post(\"/api/token/refresh/\"); // Secure cookie-based refresh\n            if (res.status === 200) {\n                localStorage.setItem(ACCESS_TOKEN, res.data.access); // Update access token\n                setIsAuthorized(true); // Refresh successful\n            } else {\n                setIsAuthorized(false); // Failed refresh\n            }\n        } catch (error) {\n            console.error(\"Error refreshing token:\", error);\n            setIsAuthorized(false); // Handle failure gracefully\n        }\n    };\n\n    // Show a loading indicator while authorization is being checked\n    if (isAuthorized === null) {\n        return <div>Loading...</div>;\n    }\n\n    // If authorized, render the children; otherwise, redirect to login\n    return isAuthorized ? children : <Navigate to=\"/login\" />;\n}\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAAQC,SAAS,QAAO,YAAY,CAAC,CAAC;AACtC,OAAOC,GAAG,MAAM,WAAW;AAC3B,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,cAAcA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExDC,SAAS,CAAC,MAAM;IACZ,MAAMQ,eAAe,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAACb,YAAY,CAAC;;QAEhD;QACA,IAAI,CAACW,KAAK,EAAE;UACRF,eAAe,CAAC,KAAK,CAAC;UACtB;QACJ;QAEA,MAAMK,OAAO,GAAGhB,SAAS,CAACa,KAAK,CAAC;QAChC,MAAMI,eAAe,GAAGD,OAAO,CAACE,GAAG;QACnC,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC,GAAG,IAAI;;QAE7B;QACA,IAAIF,eAAe,GAAGE,GAAG,EAAE;UACvB,MAAME,YAAY,CAAC,CAAC;QACxB,CAAC,MAAM;UACHV,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3B;MACJ,CAAC,CAAC,OAAOW,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDX,eAAe,CAAC,KAAK,CAAC;MAC1B;IACJ,CAAC;IAEDC,eAAe,CAAC,CAAC,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACA,MAAMG,GAAG,GAAG,MAAMvB,GAAG,CAACwB,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;MACnD,IAAID,GAAG,CAACE,MAAM,KAAK,GAAG,EAAE;QACpBZ,YAAY,CAACa,OAAO,CAACzB,YAAY,EAAEsB,GAAG,CAACI,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;QACrDlB,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;MAC3B,CAAC,MAAM;QACHA,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;MAC5B;IACJ,CAAC,CAAC,OAAOW,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CX,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5B;EACJ,CAAC;;EAED;EACA,IAAID,YAAY,KAAK,IAAI,EAAE;IACvB,oBAAOJ,OAAA;MAAAE,QAAA,EAAK;IAAU;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;;EAEA;EACA,OAAOvB,YAAY,GAAGF,QAAQ,gBAAGF,OAAA,CAACP,QAAQ;IAACmC,EAAE,EAAC;EAAQ;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC7D;AAACxB,EAAA,CAvDQF,cAAc;AAAA4B,EAAA,GAAd5B,cAAc;AAyDvB,eAAeA,cAAc;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}