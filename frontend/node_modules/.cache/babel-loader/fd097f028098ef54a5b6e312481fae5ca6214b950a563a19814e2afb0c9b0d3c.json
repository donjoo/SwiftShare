{"ast":null,"code":"import axios from 'axios';\nconst adminAxiosInstance = axios.create({\n  baseURL: 'http://localhost:8000/admin/'\n});\nadminAxiosInstance.interceptors.request.use(config => {\n  const adminToken = localStorage.getItem('adminToken');\n  if (adminToken) {\n    config.headers['Authorization'] = `Bearer ${adminToken}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nadminAxiosInstance.interceptors.response.use(response => response,\n// If the response is successful, just return it\nasync error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refresh');\n      const refreshResponse = await axios.post('http://localhost:8000/admin/token/refresh/', {\n        refresh: refreshToken\n      });\n      // Store the new admin token\n      localStorage.setItem('adminToken', refreshResponse.data.access);\n      originalRequest.headers['Authorization'] = `Bearer ${refreshResponse.data.access}`;\n      return adminAxiosInstance(originalRequest);\n    } catch (refreshError) {\n      console.error('Token refresh failed:', refreshError);\n      // Log out the admin if the refresh fails\n      localStorage.clear();\n      window.location.href = '/admin-login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// adminAxiosInstance.interceptors.request.use((config) => {\n//     const token = localStorage.getItem('adminToken');\n//     if (token) {\n//         config.headers.Authorization = `Bearer ${token}`;\n//     }\n//     return config;\n//     },\n// (error) => Promise.reject(error)\n// );\n\nexport default adminAxiosInstance;","map":{"version":3,"names":["axios","adminAxiosInstance","create","baseURL","interceptors","request","use","config","adminToken","localStorage","getItem","headers","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","refreshResponse","post","refresh","setItem","data","access","refreshError","console","clear","window","location","href"],"sources":["/media/donjo/HDD/projects/SwiftShare/frontend/src/adminaxiosconfig.jsx"],"sourcesContent":["import axios from 'axios';\n\n\nconst adminAxiosInstance = axios.create({\n    baseURL: 'http://localhost:8000/admin/'\n});\n\nadminAxiosInstance.interceptors.request.use(\n    (config) => {\n        const adminToken = localStorage.getItem('adminToken');\n        if (adminToken) {\n            config.headers['Authorization'] = `Bearer ${adminToken}`;\n        }\n\n        return config;\n    },\n    (error) => Promise.reject(error)\n);  \n\nadminAxiosInstance.interceptors.response.use(\n    (response) => response,  // If the response is successful, just return it\n    async (error) => {\n      const originalRequest = error.config;\n      if (error.response.status === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        try {\n          const refreshToken = localStorage.getItem('refresh');\n          const refreshResponse = await axios.post('http://localhost:8000/admin/token/refresh/', {\n            refresh: refreshToken,\n          });\n          // Store the new admin token\n          localStorage.setItem('adminToken', refreshResponse.data.access);\n          originalRequest.headers['Authorization'] = `Bearer ${refreshResponse.data.access}`;\n          return adminAxiosInstance(originalRequest);\n        } catch (refreshError) {\n          console.error('Token refresh failed:', refreshError);\n          // Log out the admin if the refresh fails\n          localStorage.clear();\n          window.location.href = '/admin-login';\n        }\n      }\n      return Promise.reject(error);\n    }\n  );\n\n\n\n// adminAxiosInstance.interceptors.request.use((config) => {\n//     const token = localStorage.getItem('adminToken');\n//     if (token) {\n//         config.headers.Authorization = `Bearer ${token}`;\n//     }\n//     return config;\n//     },\n// (error) => Promise.reject(error)\n// );\n\n\n\nexport default adminAxiosInstance"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,kBAAkB,GAAGD,KAAK,CAACE,MAAM,CAAC;EACpCC,OAAO,EAAE;AACb,CAAC,CAAC;AAEFF,kBAAkB,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACtCC,MAAM,IAAK;EACR,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EACrD,IAAIF,UAAU,EAAE;IACZD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,UAAU,EAAE;EAC5D;EAEA,OAAOD,MAAM;AACjB,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACnC,CAAC;AAEDX,kBAAkB,CAACG,YAAY,CAACW,QAAQ,CAACT,GAAG,CACvCS,QAAQ,IAAKA,QAAQ;AAAG;AACzB,MAAOH,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACL,MAAM;EACpC,IAAIK,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5DF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,IAAI;MACF,MAAMC,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;MACpD,MAAMU,eAAe,GAAG,MAAMpB,KAAK,CAACqB,IAAI,CAAC,4CAA4C,EAAE;QACrFC,OAAO,EAAEH;MACX,CAAC,CAAC;MACF;MACAV,YAAY,CAACc,OAAO,CAAC,YAAY,EAAEH,eAAe,CAACI,IAAI,CAACC,MAAM,CAAC;MAC/DT,eAAe,CAACL,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUS,eAAe,CAACI,IAAI,CAACC,MAAM,EAAE;MAClF,OAAOxB,kBAAkB,CAACe,eAAe,CAAC;IAC5C,CAAC,CAAC,OAAOU,YAAY,EAAE;MACrBC,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAEc,YAAY,CAAC;MACpD;MACAjB,YAAY,CAACmB,KAAK,CAAC,CAAC;MACpBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,cAAc;IACvC;EACF;EACA,OAAOlB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAIH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,eAAeX,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}