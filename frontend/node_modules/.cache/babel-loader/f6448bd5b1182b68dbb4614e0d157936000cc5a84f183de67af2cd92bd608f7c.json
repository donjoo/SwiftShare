{"ast":null,"code":"var _jsxFileName = \"/media/donjo/HDD/projects/SwiftShare/frontend/src/components/protectedroutes/privateroutes.jsx\",\n  _s = $RefreshSig$();\n// import { Navigate } from \"react-router-dom\";\n// import { jwtDecode } from \"jwt-decode\";\n// import api from \"../../api\";\n// import { REFRESH_TOKEN,ACCESS_TOKEN} from \"../../constants\";\n// import { useState,useEffect } from \"react\";\n\n// function ProtectedRoute({ children }) {\n//     const [isAuthorized, setIsAuthorized] = useState(null);\n\n//     useEffect(() => {\n//         auth().catch(() => setIsAuthorized(false))\n//     },[] )\n\n//     const refreshToken = async () => {\n//         const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n//         try {\n//             const res = await api.post(\"/api/token/refresh/\",{\n//                 refresh: refreshToken,\n//             });\n//             if (res.status === 200){\n//                 localStorage.setItem(ACCESS_TOKEN, res.data.access)\n//                 setIsAuthorized(true)\n//             }else {\n//                 setIsAuthorized(false)\n//             }\n//         }catch (error) {\n//             console.log(error);\n//             setIsAuthorized(false);\n//         }\n//     };\n\n//     const auth = async () => {\n//         const token = localStorage.getItem(ACCESS_TOKEN)\n//         if (!token) {\n//             setIsAuthorized(false)\n//             return\n//         }\n//         const decoded = jwtDecode(token)\n//         const tokenExpiration = decoded.exp\n//         const now = Date.now() / 1000\n\n//         if (tokenExpiration < now) {\n//             await refreshToken()\n//         } else {\n//             setIsAuthorized(true)\n//         }\n//     }\n\n//     if (isAuthorized === null) {\n//         return <div>Loading....</div>\n//     }\n\n//     return isAuthorized ? children : <Navigate to=\"/login\" />\n// }\n\n// export default ProtectedRoute\n\nimport { Navigate } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\nimport api from \"../../api\";\nimport { ACCESS_TOKEN } from \"../../constants\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProtectedRoute({\n  children\n}) {\n  _s();\n  const [isAuthorized, setIsAuthorized] = useState(null);\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        await auth();\n      } catch {\n        setIsAuthorized(false);\n      }\n    };\n    checkAuth(); // Execute the function only once when the component mounts\n  }, []); // Empty dependency array ensures it runs only once\n\n  const refreshToken = async () => {\n    const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n    try {\n      const res = await api.post(\"/api/token/refresh/\", {\n        refresh: refreshToken\n      });\n      if (res.status === 200) {\n        localStorage.setItem(ACCESS_TOKEN, res.data.access);\n        setIsAuthorized(true);\n      } else {\n        setIsAuthorized(false);\n      }\n    } catch (error) {\n      console.log(error);\n      setIsAuthorized(false);\n    }\n  };\n  const auth = async () => {\n    const token = localStorage.getItem(ACCESS_TOKEN);\n    if (!token) {\n      setIsAuthorized(false);\n      return;\n    }\n    const decoded = jwtDecode(token);\n    const tokenExpiration = decoded.exp;\n    const now = Date.now() / 1000;\n    if (tokenExpiration < now) {\n      await refreshToken();\n    } else {\n      setIsAuthorized(true);\n    }\n  };\n  if (isAuthorized === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 16\n    }, this);\n  }\n  return isAuthorized ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 38\n  }, this);\n}\n_s(ProtectedRoute, \"/RbkxiFcbMKahpHiUnYVhfdK+Ww=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Navigate","jwtDecode","api","ACCESS_TOKEN","useState","useEffect","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","isAuthorized","setIsAuthorized","checkAuth","auth","refreshToken","localStorage","getItem","REFRESH_TOKEN","res","post","refresh","status","setItem","data","access","error","console","log","token","decoded","tokenExpiration","exp","now","Date","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/media/donjo/HDD/projects/SwiftShare/frontend/src/components/protectedroutes/privateroutes.jsx"],"sourcesContent":["// import { Navigate } from \"react-router-dom\";\n// import { jwtDecode } from \"jwt-decode\";\n// import api from \"../../api\";\n// import { REFRESH_TOKEN,ACCESS_TOKEN} from \"../../constants\";\n// import { useState,useEffect } from \"react\";\n\n\n\n// function ProtectedRoute({ children }) {\n//     const [isAuthorized, setIsAuthorized] = useState(null);\n\n//     useEffect(() => {\n//         auth().catch(() => setIsAuthorized(false))\n//     },[] )\n\n//     const refreshToken = async () => {\n//         const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n//         try {\n//             const res = await api.post(\"/api/token/refresh/\",{\n//                 refresh: refreshToken,\n//             });\n//             if (res.status === 200){\n//                 localStorage.setItem(ACCESS_TOKEN, res.data.access)\n//                 setIsAuthorized(true)\n//             }else {\n//                 setIsAuthorized(false)\n//             }\n//         }catch (error) {\n//             console.log(error);\n//             setIsAuthorized(false);\n//         }\n//     };\n\n//     const auth = async () => {\n//         const token = localStorage.getItem(ACCESS_TOKEN)\n//         if (!token) {\n//             setIsAuthorized(false)\n//             return\n//         }\n//         const decoded = jwtDecode(token)\n//         const tokenExpiration = decoded.exp\n//         const now = Date.now() / 1000\n\n//         if (tokenExpiration < now) {\n//             await refreshToken()\n//         } else {\n//             setIsAuthorized(true)\n//         }\n//     }\n\n//     if (isAuthorized === null) {\n//         return <div>Loading....</div>\n//     }\n\n//     return isAuthorized ? children : <Navigate to=\"/login\" />\n// }\n\n// export default ProtectedRoute\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Navigate } from \"react-router-dom\";\nimport {jwtDecode} from \"jwt-decode\";\nimport api from \"../../api\";\nimport { ACCESS_TOKEN } from \"../../constants\";\nimport { useState, useEffect } from \"react\";\n\nfunction ProtectedRoute({ children }) {\n    const [isAuthorized, setIsAuthorized] = useState(null);\n\n    useEffect(() => {\n        const checkAuth = async () => {\n            try {\n                await auth();\n            } catch {\n                setIsAuthorized(false);\n            }\n        };\n        checkAuth(); // Execute the function only once when the component mounts\n    }, []); // Empty dependency array ensures it runs only once\n\n    const refreshToken = async () => {\n        const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n        try {\n            const res = await api.post(\"/api/token/refresh/\", { refresh: refreshToken });\n            if (res.status === 200) {\n                localStorage.setItem(ACCESS_TOKEN, res.data.access);\n                setIsAuthorized(true);\n            } else {\n                setIsAuthorized(false);\n            }\n        } catch (error) {\n            console.log(error);\n            setIsAuthorized(false);\n        }\n    };\n\n    const auth = async () => {\n        const token = localStorage.getItem(ACCESS_TOKEN);\n        if (!token) {\n            setIsAuthorized(false);\n            return;\n        }\n        const decoded = jwtDecode(token);\n        const tokenExpiration = decoded.exp;\n        const now = Date.now() / 1000;\n\n        if (tokenExpiration < now) {\n            await refreshToken();\n        } else {\n            setIsAuthorized(true);\n        }\n    };\n\n    if (isAuthorized === null) {\n        return <div>Loading...</div>;\n    }\n\n    return isAuthorized ? children : <Navigate to=\"/login\" />;\n}\n\nexport default ProtectedRoute;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}