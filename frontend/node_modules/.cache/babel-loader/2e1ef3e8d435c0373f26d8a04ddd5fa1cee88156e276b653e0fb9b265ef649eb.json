{"ast":null,"code":"import axios from 'axios';\nconst adminAxiosInstance = axios.create({\n  baseURL: 'http://localhost:8000/admin/'\n});\n\n// adminAxiosInstance.interceptors.request.use(\n//     (config) => {\n//         const adminToken = localStorage.getItem('adminToken');\n//         if (adminToken) {\n//             config.headers['Authorization'] = `Bearer ${adminToken}`;\n//         }\n\n//         return config;\n//     },\n//     (error) => Promise.reject(error)\n// );  \n\nadminAxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('adminToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nconst refreshAccessToken = async () => {\n  const refreshToken = localStorage.getItem('refreshToken');\n  if (!refreshToken) {\n    throw new Error('Refresh token not found');\n  }\n  const response = await adminAxiosInstance.post('/admin/token/refresh/', {\n    refresh: refreshToken\n  });\n  localStorage.setItem('adminToken', response.data.access);\n  return response.data.access;\n};\nexport default adminAxiosInstance;","map":{"version":3,"names":["axios","adminAxiosInstance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","refreshAccessToken","refreshToken","Error","response","post","refresh","setItem","data","access"],"sources":["/media/donjo/HDD/projects/SwiftShare/frontend/src/adminaxiosconfig.jsx"],"sourcesContent":["import axios from 'axios';\n\n\nconst adminAxiosInstance = axios.create({\n    baseURL: 'http://localhost:8000/admin/'\n});\n\n// adminAxiosInstance.interceptors.request.use(\n//     (config) => {\n//         const adminToken = localStorage.getItem('adminToken');\n//         if (adminToken) {\n//             config.headers['Authorization'] = `Bearer ${adminToken}`;\n//         }\n\n//         return config;\n//     },\n//     (error) => Promise.reject(error)\n// );  \n\n\n\nadminAxiosInstance.interceptors.request.use((config) => {\n    const token = localStorage.getItem('adminToken');\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n    },\n(error) => Promise.reject(error)\n);\n\nconst refreshAccessToken = async () => {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (!refreshToken) {\n        throw new Error('Refresh token not found');\n    }\n    const response = await adminAxiosInstance.post('/admin/token/refresh/', { refresh: refreshToken });\n    localStorage.setItem('adminToken', response.data.access);\n    return response.data.access;\n};\n\n\nexport default adminAxiosInstance"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,kBAAkB,GAAGD,KAAK,CAACE,MAAM,CAAC;EACpCC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIAF,kBAAkB,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACpD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAChD,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACb,CAAC,EACJM,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CAC/B,CAAC;AAED,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACnC,MAAMC,YAAY,GAAGR,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EACzD,IAAI,CAACO,YAAY,EAAE;IACf,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC9C;EACA,MAAMC,QAAQ,GAAG,MAAMlB,kBAAkB,CAACmB,IAAI,CAAC,uBAAuB,EAAE;IAAEC,OAAO,EAAEJ;EAAa,CAAC,CAAC;EAClGR,YAAY,CAACa,OAAO,CAAC,YAAY,EAAEH,QAAQ,CAACI,IAAI,CAACC,MAAM,CAAC;EACxD,OAAOL,QAAQ,CAACI,IAAI,CAACC,MAAM;AAC/B,CAAC;AAGD,eAAevB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}