{"ast":null,"code":"var _jsxFileName = \"/media/donjo/HDD/projects/SwiftShare/frontend/src/components/protectedroutes/privateroutes.jsx\",\n  _s = $RefreshSig$();\nimport { Navigate } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { api } from \"../api\";\nimport { REFRESH_TOKEN, ACCESS_TOKEN } from \"../../constants\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProtectedRoute({\n  children\n}) {\n  _s();\n  const [isAuthorized, setIsAuthorized] = useState(null);\n  useEffect(() => {\n    auth().catch(() => setIsAuthorized(false));\n  }, []);\n  const refreshToken = async () => {\n    const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n    try {\n      const res = await api.post(\"/api/token/refresh/\", {\n        refresh: refreshToken\n      });\n      if (res.status == 200) {\n        localStorage.setItem(ACCESS_TOKEN, res.data.access);\n        setIsAuthorized(true);\n      } else {\n        setIsAuthorized(False);\n      }\n    } catch (error) {\n      console.log(error);\n      setIsAuthorized(false);\n    }\n  };\n  const auth = async () => {\n    const token = localStorage.getItem(ACCESS_TOKEN);\n    if (!token) {\n      setIsAuthorized(false);\n      return;\n    }\n    const decoded = jwtDecode(token);\n    const tokenExpiration = decoded.exp;\n    const now = Date.now() / 1000;\n    if (tokenExpiration < now) {\n      await refreshToken();\n    } else {\n      setIsAuthorized(true);\n    }\n  };\n  if (isAuthorized === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 16\n    }, this);\n  }\n  return isAuthorized ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 38\n  }, this);\n}\n_s(ProtectedRoute, \"/RbkxiFcbMKahpHiUnYVhfdK+Ww=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Navigate","jwtDecode","api","REFRESH_TOKEN","ACCESS_TOKEN","useState","useEffect","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","isAuthorized","setIsAuthorized","auth","catch","refreshToken","localStorage","getItem","res","post","refresh","status","setItem","data","access","False","error","console","log","token","decoded","tokenExpiration","exp","now","Date","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/media/donjo/HDD/projects/SwiftShare/frontend/src/components/protectedroutes/privateroutes.jsx"],"sourcesContent":["import { Navigate } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\nimport {api} from \"../api\";\nimport { REFRESH_TOKEN,ACCESS_TOKEN} from \"../../constants\";\nimport { useState,useEffect } from \"react\";\n\n\n\nfunction ProtectedRoute({ children }) {\n    const [isAuthorized, setIsAuthorized] = useState(null);\n\n    useEffect(() => {\n        auth().catch(() => setIsAuthorized(false))\n    },[] )\n\n    const refreshToken = async () => {\n        const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n        try {\n            const res = await api.post(\"/api/token/refresh/\",{\n                refresh: refreshToken,\n            });\n            if (res.status == 200){\n                localStorage.setItem(ACCESS_TOKEN, res.data.access)\n                setIsAuthorized(true)\n            }else {\n                setIsAuthorized(False)\n            }\n        }catch (error) {\n            console.log(error);\n            setIsAuthorized(false);\n        }\n    };\n\n    const auth = async () => {\n        const token = localStorage.getItem(ACCESS_TOKEN)\n        if (!token) {\n            setIsAuthorized(false)\n            return\n        }\n        const decoded = jwtDecode(token)\n        const tokenExpiration = decoded.exp\n        const now = Date.now() / 1000\n\n        if (tokenExpiration < now) {\n            await refreshToken()\n        } else {\n            setIsAuthorized(true)\n        }\n    }\n\n    if (isAuthorized === null) {\n        return <div>Loading....</div>\n    }\n\n    return isAuthorized ? children : <Navigate to=\"/login\" />\n}\n\nexport default ProtectedRoute\n\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,SAAS,QAAQ,YAAY;AACtC,SAAQC,GAAG,QAAO,QAAQ;AAC1B,SAASC,aAAa,EAACC,YAAY,QAAO,iBAAiB;AAC3D,SAASC,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI3C,SAASC,cAAcA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACZQ,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,MAAMF,eAAe,CAAC,KAAK,CAAC,CAAC;EAC9C,CAAC,EAAC,EAAG,CAAC;EAEN,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMA,YAAY,GAAGC,YAAY,CAACC,OAAO,CAACf,aAAa,CAAC;IACxD,IAAI;MACA,MAAMgB,GAAG,GAAG,MAAMjB,GAAG,CAACkB,IAAI,CAAC,qBAAqB,EAAC;QAC7CC,OAAO,EAAEL;MACb,CAAC,CAAC;MACF,IAAIG,GAAG,CAACG,MAAM,IAAI,GAAG,EAAC;QAClBL,YAAY,CAACM,OAAO,CAACnB,YAAY,EAAEe,GAAG,CAACK,IAAI,CAACC,MAAM,CAAC;QACnDZ,eAAe,CAAC,IAAI,CAAC;MACzB,CAAC,MAAK;QACFA,eAAe,CAACa,KAAK,CAAC;MAC1B;IACJ,CAAC,QAAOC,KAAK,EAAE;MACXC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClBd,eAAe,CAAC,KAAK,CAAC;IAC1B;EACJ,CAAC;EAED,MAAMC,IAAI,GAAG,MAAAA,CAAA,KAAY;IACrB,MAAMgB,KAAK,GAAGb,YAAY,CAACC,OAAO,CAACd,YAAY,CAAC;IAChD,IAAI,CAAC0B,KAAK,EAAE;MACRjB,eAAe,CAAC,KAAK,CAAC;MACtB;IACJ;IACA,MAAMkB,OAAO,GAAG9B,SAAS,CAAC6B,KAAK,CAAC;IAChC,MAAME,eAAe,GAAGD,OAAO,CAACE,GAAG;IACnC,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC,GAAG,IAAI;IAE7B,IAAIF,eAAe,GAAGE,GAAG,EAAE;MACvB,MAAMlB,YAAY,CAAC,CAAC;IACxB,CAAC,MAAM;MACHH,eAAe,CAAC,IAAI,CAAC;IACzB;EACJ,CAAC;EAED,IAAID,YAAY,KAAK,IAAI,EAAE;IACvB,oBAAOJ,OAAA;MAAAE,QAAA,EAAK;IAAW;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACjC;EAEA,OAAO3B,YAAY,GAAGF,QAAQ,gBAAGF,OAAA,CAACR,QAAQ;IAACwC,EAAE,EAAC;EAAQ;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC7D;AAAC5B,EAAA,CA/CQF,cAAc;AAAAgC,EAAA,GAAdhC,cAAc;AAiDvB,eAAeA,cAAc;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}