{"ast":null,"code":"var _jsxFileName = \"/media/donjo/HDD/projects/SwiftShare/frontend/src/components/protectedroutes/privateroutes.jsx\",\n  _s = $RefreshSig$();\nimport { Navigate } from \"react-router-dom\";\nimport jwtDecode from \"jwt-decode\"; // Ensure proper import for jwtDecode\nimport api from \"../../api\";\nimport { REFRESH_TOKEN, ACCESS_TOKEN } from \"../../constants\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProtectedRoute({\n  children\n}) {\n  _s();\n  const [isAuthorized, setIsAuthorized] = useState(null); // Track authorization state\n\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const isAuthenticated = await checkAuth();\n        if (isAuthenticated !== isAuthorized) {\n          setIsAuthorized(isAuthenticated); // Only update if state changes\n        }\n      } catch (error) {\n        console.error(\"Error during auth check:\", error);\n        setIsAuthorized(false); // Explicitly mark unauthorized on error\n      }\n    };\n    checkAuthStatus();\n  }, [isAuthorized]); // Depend only on `isAuthorized`\n\n  const checkAuth = async () => {\n    const token = localStorage.getItem(ACCESS_TOKEN);\n    if (!token) {\n      return false; // No token, unauthorized\n    }\n    const decoded = jwtDecode(token);\n    const tokenExpiration = decoded.exp;\n    const now = Date.now() / 1000;\n    if (tokenExpiration < now) {\n      return await refreshToken(); // Token expired, try refreshing\n    }\n    return true; // Token valid\n  };\n  const refreshToken = async () => {\n    const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n    if (!refreshToken) {\n      return false; // No refresh token available\n    }\n    try {\n      const res = await api.post(\"/api/token/refresh/\", {\n        refresh: refreshToken\n      });\n      if (res.status === 200) {\n        localStorage.setItem(ACCESS_TOKEN, res.data.access);\n        return true; // Token refreshed, authorized\n      }\n    } catch (error) {\n      console.error(\"Error refreshing token:\", error);\n    }\n    return false; // Refresh failed, unauthorized\n  };\n\n  // Display a loading state while authorization is being determined\n  if (isAuthorized === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Navigate to login if not authorized, otherwise render children\n  return isAuthorized ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 38\n  }, this);\n}\n_s(ProtectedRoute, \"/RbkxiFcbMKahpHiUnYVhfdK+Ww=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Navigate","jwtDecode","api","REFRESH_TOKEN","ACCESS_TOKEN","useState","useEffect","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","isAuthorized","setIsAuthorized","checkAuthStatus","isAuthenticated","checkAuth","error","console","token","localStorage","getItem","decoded","tokenExpiration","exp","now","Date","refreshToken","res","post","refresh","status","setItem","data","access","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/media/donjo/HDD/projects/SwiftShare/frontend/src/components/protectedroutes/privateroutes.jsx"],"sourcesContent":["import { Navigate } from \"react-router-dom\";\nimport jwtDecode from \"jwt-decode\"; // Ensure proper import for jwtDecode\nimport api from \"../../api\";\nimport { REFRESH_TOKEN, ACCESS_TOKEN } from \"../../constants\";\nimport { useState, useEffect } from \"react\";\n\nfunction ProtectedRoute({ children }) {\n    const [isAuthorized, setIsAuthorized] = useState(null); // Track authorization state\n\n    useEffect(() => {\n        const checkAuthStatus = async () => {\n            try {\n                const isAuthenticated = await checkAuth();\n                if (isAuthenticated !== isAuthorized) {\n                    setIsAuthorized(isAuthenticated); // Only update if state changes\n                }\n            } catch (error) {\n                console.error(\"Error during auth check:\", error);\n                setIsAuthorized(false); // Explicitly mark unauthorized on error\n            }\n        };\n        checkAuthStatus();\n    }, [isAuthorized]); // Depend only on `isAuthorized`\n\n    const checkAuth = async () => {\n        const token = localStorage.getItem(ACCESS_TOKEN);\n        if (!token) {\n            return false; // No token, unauthorized\n        }\n\n        const decoded = jwtDecode(token);\n        const tokenExpiration = decoded.exp;\n        const now = Date.now() / 1000;\n\n        if (tokenExpiration < now) {\n            return await refreshToken(); // Token expired, try refreshing\n        }\n\n        return true; // Token valid\n    };\n\n    const refreshToken = async () => {\n        const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n        if (!refreshToken) {\n            return false; // No refresh token available\n        }\n\n        try {\n            const res = await api.post(\"/api/token/refresh/\", {\n                refresh: refreshToken,\n            });\n            if (res.status === 200) {\n                localStorage.setItem(ACCESS_TOKEN, res.data.access);\n                return true; // Token refreshed, authorized\n            }\n        } catch (error) {\n            console.error(\"Error refreshing token:\", error);\n        }\n        return false; // Refresh failed, unauthorized\n    };\n\n    // Display a loading state while authorization is being determined\n    if (isAuthorized === null) {\n        return <div>Loading...</div>;\n    }\n\n    // Navigate to login if not authorized, otherwise render children\n    return isAuthorized ? children : <Navigate to=\"/login\" />;\n}\n\nexport default ProtectedRoute;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}