{"ast":null,"code":"// import { Navigate } from \"react-router-dom\";\n// import { jwtDecode } from \"jwt-decode\";\n// import api from \"../../api\";\n// import { REFRESH_TOKEN,ACCESS_TOKEN} from \"../../constants\";\n// import { useState,useEffect } from \"react\";\n\n// function ProtectedRoute({ children }) {\n//     const [isAuthorized, setIsAuthorized] = useState(null);\n\n//     useEffect(() => {\n//         auth().catch(() => setIsAuthorized(false))\n//     },[] )\n\n//     const refreshToken = async () => {\n//         const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n//         try {\n//             const res = await api.post(\"/api/token/refresh/\",{\n//                 refresh: refreshToken,\n//             });\n//             if (res.status === 200){\n//                 localStorage.setItem(ACCESS_TOKEN, res.data.access)\n//                 setIsAuthorized(true)\n//             }else {\n//                 setIsAuthorized(false)\n//             }\n//         }catch (error) {\n//             console.log(error);\n//             setIsAuthorized(false);\n//         }\n//     };\n\n//     const auth = async () => {\n//         const token = localStorage.getItem(ACCESS_TOKEN)\n//         if (!token) {\n//             setIsAuthorized(false)\n//             return\n//         }\n//         const decoded = jwtDecode(token)\n//         const tokenExpiration = decoded.exp\n//         const now = Date.now() / 1000\n\n//         if (tokenExpiration < now) {\n//             await refreshToken()\n//         } else {\n//             setIsAuthorized(true)\n//         }\n//     }\n\n//     if (isAuthorized === null) {\n//         return <div>Loading....</div>\n//     }\n\n//     return isAuthorized ? children : <Navigate to=\"/login\" />\n// }\n\n// export default ProtectedRoute","map":{"version":3,"names":[],"sources":["/media/donjo/HDD/projects/SwiftShare/frontend/src/components/protectedroutes/privateroutes.jsx"],"sourcesContent":["// import { Navigate } from \"react-router-dom\";\n// import { jwtDecode } from \"jwt-decode\";\n// import api from \"../../api\";\n// import { REFRESH_TOKEN,ACCESS_TOKEN} from \"../../constants\";\n// import { useState,useEffect } from \"react\";\n\n\n\n// function ProtectedRoute({ children }) {\n//     const [isAuthorized, setIsAuthorized] = useState(null);\n\n//     useEffect(() => {\n//         auth().catch(() => setIsAuthorized(false))\n//     },[] )\n\n//     const refreshToken = async () => {\n//         const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n//         try {\n//             const res = await api.post(\"/api/token/refresh/\",{\n//                 refresh: refreshToken,\n//             });\n//             if (res.status === 200){\n//                 localStorage.setItem(ACCESS_TOKEN, res.data.access)\n//                 setIsAuthorized(true)\n//             }else {\n//                 setIsAuthorized(false)\n//             }\n//         }catch (error) {\n//             console.log(error);\n//             setIsAuthorized(false);\n//         }\n//     };\n\n//     const auth = async () => {\n//         const token = localStorage.getItem(ACCESS_TOKEN)\n//         if (!token) {\n//             setIsAuthorized(false)\n//             return\n//         }\n//         const decoded = jwtDecode(token)\n//         const tokenExpiration = decoded.exp\n//         const now = Date.now() / 1000\n\n//         if (tokenExpiration < now) {\n//             await refreshToken()\n//         } else {\n//             setIsAuthorized(true)\n//         }\n//     }\n\n//     if (isAuthorized === null) {\n//         return <div>Loading....</div>\n//     }\n\n//     return isAuthorized ? children : <Navigate to=\"/login\" />\n// }\n\n// export default ProtectedRoute\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}